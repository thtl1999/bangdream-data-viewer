import os
import requests
import sys
import fileinput
import re
import json
import urllib.request

musicnamecode = '106'

#get bms file from bangdream database
if not os.path.isfile('scorebms/'+musicnamecode+'ex.txt'):
    print('download bms from bangdream database')
    req = requests.get('https://api.bangdream.ga/v1/jp/music/'+musicnamecode)
    data = req.json()
    musicnamestring = data["chartAssetBundleName"]
    req = requests.get('https://res.bangdream.ga/assets/musicscore/'+musicnamecode+'_'+musicnamestring+'_expert.txt')
    html = req.text
    f1 = open('scorebms/'+musicnamecode+'ex.txt','w')
    f1.write(html)
    f1.close()
else:
    print("alreay have music score")


#parse bms data
fr = open("scorebms/"+musicnamecode+'ex.txt','r')
fw = open("myscore/" + musicnamecode + "ex.txt", 'w')

se = {}
#header read
#it should be modified to handle bpm over 256
while True:
    line = fr.readline()
    #print(line)
    if line.find('MAIN') != -1:
        break
    if line.find('WAV') != -1:
        se[line[4:6]] = line[7:-1]
        #print(se[line[4:6]])
    elif line.find('BPM') != -1:
        bpm = float(line[5:-1])
    else:
        continue


print(se)
print('start bpm:' + str(bpm))


#main read
longstarted = []            #to indicate there was longnotestart before a line
for i in range(0,8):
    longstarted.append(False)

note = []   #all the notes will be put here. note has notese, notetype, notebeat, notelane, noteproperty, notetiming
#notese: put se code, noetype: decide (later) normal, longstart, longend, longflick, slide, slidefinish notebeat: decide beat
#notelane: lane of this note noteproperty: decide skill, fever, extra notetiming: calculate time with bpm and notebeat

noteindex = 0   #to indicate note number
while True:
    line = fr.readline()
    if not line: break

    if line.find('#') == -1: #only read for #
        continue

    nowbeat = float(line[1:4])  #first 3 digit indicate beat
    lanestring = line[4:6]      #last 2 digit indicate lane number and type


    #select lane number
    if lanestring[1] == '6': lane = 1
    if lanestring[1] == '1': lane = 2
    if lanestring[1] == '2': lane = 3
    if lanestring[1] == '3': lane = 4
    if lanestring[1] == '4': lane = 5
    if lanestring[1] == '5': lane = 6
    if lanestring[1] == '8': lane = 7
    #select long note line
    #if lanestring[0] == '1':
    isitlongline = False
    if lanestring[0] == '5':
        isitlongline = True
    # special lane number
    if lanestring == '01': lane = 0


    #read a line
    beatnumber = 0  # to count how much digit are there. to calculate beat
    i = 7           # start string number of line
    thislinenoteindex = noteindex   # save current note index to check
    while (i+2) < len(line):        # read until nothing to read
        if line[i:i+2] != '00':     #if 00, don't create note and read next
            note.append({})
            #note[noteindex] = {'notese': line[i:i+2]}
            note[noteindex]['notese'] = line[i:i+2]       # notetype is selected by se
            note[noteindex]['notebeat'] = beatnumber      # notebeat should be corrected after read all digit in this line
            note[noteindex]['notelane'] = lane              #notelane
            note[noteindex]['notetype'] = 'none'            #not yet decieded

            if lanestring == '03':                          #bpm control
                note[noteindex]['notese'] = int(line[i:i+2],16)
                note[noteindex]['notelane'] = 0
                note[noteindex]['notetype'] = 'special'

            if lanestring == '01':                          #bgm, fever control
                note[noteindex]['notetype'] = 'special'

            if isitlongline == True:                        #long note indicate
                note[noteindex]['notetype'] = 'long'

            noteindex += 1                              # if note exist, index++


        beatnumber += 1                                 # count beat
        i = i+2                                         # every note is 2 digit number(string)

    #calculate notebeat and select note type
    for i in range(thislinenoteindex , noteindex):
        tempbeat = nowbeat + 1/beatnumber*note[i]['notebeat'] #calculate notebeat
        note[i]['notebeat'] = tempbeat


        if note[i]['notelane'] == 0:                #handle special type of note
            if lanestring == '03':
                note[i]['noteproperty'] = 'bpmchange'
                continue
            if note[i]['notese'] == '01':
                note[i]['noteproperty'] = 'bgm'
            if se[note[i]['notese']] == 'cmd_fever_ready.wav':
                note[i]['noteproperty'] = 'feverready'
            if se[note[i]['notese']] == 'cmd_fever_start.wav':
                note[i]['noteproperty'] = 'feverstart'
            if se[note[i]['notese']] == 'cmd_fever_end.wav':
                note[i]['noteproperty'] = 'feverend'
            if se[note[i]['notese']] == 'cmd_fever_checkpoint.wav':
                note[i]['noteproperty'] = 'fevercheck'


        elif note[i]['notetype'] == 'long':     #long
            if longstarted[lane] == False:          #if this is long note start
                note[i]['notetype'] = 'longstart'
                longstarted[lane] = True
                if se[note[i]['notese']] == 'bd.wav':
                    note[i]['noteproperty'] = 'none'
                if se[note[i]['notese']] == 'skill.wav':
                    note[i]['noteproperty'] = 'skill'
                if se[note[i]['notese']] == 'fever_note.wav':
                    note[i]['noteproperty'] = 'fever'
            else:                                   #if this is long note last
                longstarted[lane] = False
                if se[note[i]['notese']] == 'bd.wav':
                    note[i]['noteproperty'] = 'none'
                    note[i]['notetype'] = 'longend'
                if se[note[i]['notese']] == 'flick.wav':
                    note[i]['noteproperty'] = 'none'
                    note[i]['notetype'] = 'longflick'
                if se[note[i]['notese']] == 'skill.wav':
                    note[i]['noteproperty'] = 'skill'
                    note[i]['notetype'] = 'longend'
                if se[note[i]['notese']] == 'fever_note.wav':
                    note[i]['noteproperty'] = 'fever'
                    note[i]['notetype'] = 'longend'
                if se[note[i]['notese']] == 'fever_note_flick.wav':
                    note[i]['noteproperty'] = 'fever'
                    note[i]['notetype'] = 'longflick'

        else:                                   #normal, flick, slide
            if se[note[i]['notese']] == 'bd.wav':
                note[i]['noteproperty'] = 'none'
                note[i]['notetype'] = 'normal'
            if se[note[i]['notese']] == 'flick.wav':
                note[i]['noteproperty'] = 'none'
                note[i]['notetype'] = 'flick'
            if se[note[i]['notese']] == 'skill.wav':
                note[i]['noteproperty'] = 'skill'
                note[i]['notetype'] = 'normal'
            if se[note[i]['notese']] == 'slide_a.wav':
                note[i]['noteproperty'] = 'none'
                note[i]['notetype'] = 'slidea'
            if se[note[i]['notese']] == 'slide_end_a.wav':
                note[i]['noteproperty'] = 'none'
                note[i]['notetype'] = 'slideaend'
            if se[note[i]['notese']] == 'slide_end_flick_a.wav':
                note[i]['noteproperty'] = 'none'
                note[i]['notetype'] = 'slideaendflick'
            if se[note[i]['notese']] == 'slide_b.wav':
                note[i]['noteproperty'] = 'none'
                note[i]['notetype'] = 'slideb'
            if se[note[i]['notese']] == 'slide_end_b.wav':
                note[i]['noteproperty'] = 'none'
                note[i]['notetype'] = 'slidebend'
            if se[note[i]['notese']] == 'slide_end_flick_b.wav':
                note[i]['noteproperty'] = 'none'
                note[i]['notetype'] = 'slidebendflick'
            if se[note[i]['notese']] == 'fever_note.wav':
                note[i]['noteproperty'] = 'fever'
                note[i]['notetype'] = 'normal'
            if se[note[i]['notese']] == 'fever_note_flick.wav':
                note[i]['noteproperty'] = 'fever'
                note[i]['notetype'] = 'flick'

        #print(note[i])

#print(note)
#sort notes by beat to calculate timing (bpm change need sort)

sortednote = sorted(note,key=lambda k: k['notebeat'])
#print(sortednote)

#calculate timing
bitsec = 60/bpm
savedtiming = 0
savedbeat = 0
for i in range(len(sortednote)):
    sortednote[i]['notebeat'] *= 4
    if sortednote[i]['noteproperty'] == 'bpmchange':
        savedtiming = savedtiming + (sortednote[i]['notebeat']-savedbeat)*bitsec
        savedbeat = sortednote[i]['notebeat']
        bitsec = 60/(sortednote[i]['notese'])

    sortednote[i]['timing'] = savedtiming + (sortednote[i]['notebeat']-savedbeat)*bitsec
    print(sortednote[i])

if True:    #convert to my simulator
    fw.write('46\n'+str(bpm))

    for i in range(len(sortednote)):
        b = str(sortednote[i]['notebeat'])
        if sortednote[i]['noteproperty'] == 'bgm':
            fw.write('\n0/0/0')
            continue
        if sortednote[i]['noteproperty'] == 'bpmchange':
            fw.write('\n'+ b + '/20/' + str(sortednote[i]['notese']))
            continue
        if sortednote[i]['notelane'] == 0:
            continue

        if sortednote[i]['notetype'] == 'normal':
            t = '/1/'
        if sortednote[i]['notetype'] == 'flick':
            t = '/2/'
        if sortednote[i]['notetype'] == 'longstart':
            t = '/21/'
        if sortednote[i]['notetype'] == 'longend':
            t = '/25/'
        if sortednote[i]['notetype'] == 'longflick':
            t = '/26/'
        if sortednote[i]['notetype'] == 'slidea':
            t = '/4/'
        if sortednote[i]['notetype'] == 'slideaend':
            t = '/5/'
        if sortednote[i]['notetype'] == 'slideaendflick':
            t = '/12/'
        if sortednote[i]['notetype'] == 'slideb':
            t = '/7/'
        if sortednote[i]['notetype'] == 'slidebend':
            t = '/8/'
        if sortednote[i]['notetype'] == 'slidebendflick':
            t = '/13/'

        fw.write('\n' + b + t + str(sortednote[i]['notelane']))




fr.close()
fw.close()


